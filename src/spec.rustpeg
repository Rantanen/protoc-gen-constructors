
pub file -> File<'input>
    = _ "package" __ package:$( identifier ++ "." )
    __ types:types _
    { File { package, types } }

types -> Vec<Type<'input>>
    = type*

type -> Type<'input>
    = "message" __ name:identifier _ "{" _ constructors:( constructor ++ _ ) _ "}" _
    { Type { name: name.into(), constructors, nested_types: Default::default() } }

constructor -> Constructor<'input>
    = documentation:documentation? _
        name:identifier _
        "(" _ params:parameters _ ")" _
        "{" _ initializers:( initializer ++ _ ) _ "}"
    { Constructor { documentation, name, params, initializers } }

documentation -> Documentation<'input>
    = lines:documentation_line+
    { Documentation { lines } }

documentation_line -> &'input str
    = _ "//" [\t ]* line:$([^\r\n]*)
    { line }

parameters -> Vec<Parameter<'input>>
    = parameter ++ ( _ "," _ )

parameter -> Parameter<'input>
    = documentation:documentation? _
        param_type:param_type __
        name:identifier
    { Parameter { documentation, name, param_type } }

param_type -> ParamType<'input>
    = "int32" { ParamType::Int32 }
    / "string" { ParamType::String }
    / other:identifier { ParamType::Custom( other ) }

initializer -> Initializer<'input>
    = field:identifier _ "=" _ value:expr { Initializer { field, value } }

path -> Vec<&'input str>
    = identifier ++ "."

arguments -> Vec<Expr<'input>>
    = expr ++ ( _ "," _ )

expr -> Expr<'input>
    = e:expr_call { Expr::Call(e) }
    / e:expr_enum { Expr::Enum(e) }
    / e:expr_bool { Expr::Bool(e) }
    / e:expr_int { Expr::Integer(e) }
    / e:expr_float { Expr::Float(e) }
    / e:expr_ref { Expr::Ref(e) }

expr_call -> Call<'input>
    = type_name:( n:identifier _ "::" _ { n } )? _
        func_name:identifier _
        "(" _ args:arguments _ ")"
    { Call { type_name, func_name, args } }

expr_enum -> EnumValue<'input>
    = enum_name:identifier _ "::" _
        value_name:identifier
    { EnumValue { enum_name, value_name } }

expr_bool -> bool
    = "true" { true }
    / "false" { false }

expr_int -> i64
    = e:$( "-"? [0-9]+ ) { e.parse().expect( "Bad integer" ) }

expr_float -> f64
    = e:$( "-"? [0-9]* "." [0-9]+ ) { e.parse().expect( "Bad float" ) }

expr_ref -> &'input str
    = identifier

identifier -> &'input str = $([a-zA-Z_][a-zA-Z0-9_]*)

__ = #quiet<[ \r\n\t]+>

_ = #quiet<[ \r\n\t]*>
